FUNCIONES:

    Una funcion es un grupo de instrucciones que realizan una tarea especifica.
    Se define usando la palabra clave def, seguida del nombre de la funcion y los parametros entre parentesis.
    Despues de los parentesis se utiliza un colon : y se empieza a definir el cuerpo de la funcion.

    Ejemplo:


        def suma(a,b):
            resultado = a + b
            return resultado

        El return se usa en una funcion para poder devolverle algo es decir en este caso estamos devolviendo 
        el resultado de la suma.
        Si una funcion no tiene la palabra return, esa funcion devolvera None.

        Se pueden pasar parametros con nombres en especifico por ejemplo:

        def nombreFuncion(nombre="Juan", edad=30)


FUNCIONES PREDEFINIDAS EN PYTHON:

    print(): Esta funcion nos permite imprimir mensajes en consolas

    input(): Esta funcion le pide al usuario que introduzca datos

    len(): Esta funcion nos permite averiguar la longitud de un objeto

    range(): Esta funcion nos permite crear una secuencia de numeros

    ord(): Con el metodo ord podemos pasar las letras a sus numeros ASCII 







_________________________LISTAS_________________________


LISTAS:

    Una lista es una coleccion ordenada de elementos que pueden ser de cualquier tipo.
    Las listas se definen con corchetes y los elementos se separan con comas.

    numeros = [1, 2, 3, 4, 5]

    Se puede acceder a esos datos mediante el indice, que es la posicion del elemento en la lista, que comienza en 0.
    Es decir, si queremos acceder al segundo numero que contiene la lista seria 1.


    Dentro de la lista hay mas funciones que podemos realizar como añadir numeros, ordenarlos... etc.

    Metodos de Listas:

        append(): Añade un elemento al final

        extend(): Añade un elemento al principio

        insert(): Inserta un elemento en una posicion especifica

        remove(): Elimina la primera ocurrencia de un elemento

        pop(): Elimina y devuelve un elemento
        
        sort(): Ordena la lista 

        reverse(): Invierte el orden de los elementos 

        index(): Devuelve el indice de un valor 
        
        count(): Cuenta las ocurrencias de un valor 

        clear(): Elimina todos los elementos de la lista 



    Las listas son una coleccion ordenada y mutable.

    Mutable quiere decir que las listas pueden ser ordenadas.


    Tambien podemos iterar por cada elemento con el bucle for:


    nombres = ["Juan", "Maria", "Pedro"]

    for nombre in nombres:
        print(nombre)

    Este codigo imprimira:

    Juan
    Maria
    Pedro




    Las listas pueden contener otro tipo de elementos incluso otro tipo de listas o objetos del mismo tipo:

    lista_ejemplo = [1, "dos", True, [1, 2, 3, 4]]

    En este caso la lista tiene un entero, un string, un booleano y una lista.

    Tambien podemos hacer uso del len() para encontrar la longitud de una lista.


    Podemos eliminar elementos con la palabra clave del o remove(), la diferencia que tienen es que la palabra del
    elimina un elemento en una posicion especifica mientras que remove() elimina un elemento por su valor

    Ejemplo:

    frutas = ["pera", "manzana", "uva", "mango"]
    del frutas[0] # elimina pera
    frutas.remove('manzana')  # elimina manzana



DICCIONARIO:

    Los diccionarios permiten que los preogramadores asignen valores a ciertas palabras claves y luego recuperen esos valores 
    mas adelante mediante la referencia de la palabra clave.+

    Los diccionarios son mutables, lo que significa que podemos modificar, agregar y eliminar elementos

    En terminos de sintaxis, los diccionarios se definen con llaves y no con con corchetes:

        personas = {'Juan': 31, 'Pedro': 25, 'Maria': 42}

    Una vez tenemos nuestro diccionario definido, podemos acceder a ellos de distintas maneras:

        Para acceder a la edad de Juan:
            print(personas['Juan']) = "31"



    Los diccionarios son estructuras de datos que permiten almacenar elementos de forma clave-valor:
        Se usan para almacenar datos clave-valor y son muy utiles para cuando queremos accedere rapidamente a ciertos elementos 
        sin recorrer una lista o un conjunto completo.

    En un diccionario las claves son inmutables y unicas lo que significa que no pueden ser duplicadas o borradas,
    mientras que los valores son de cualquier tipo de datos y pueden ser duplicadas y no son unicas.


        mi_diccionario = {'clave1': valor1, 'clave2': valor2, 'clave3': valor3}

    Si cogemos como ejemplo este diccionario creado llamado mi_diccionario:
    
        Podemos agregar datos:
            mi_diccionario['nueva_clave'] = nuevo_valor

        Modificar el valor de cualquier clave dentro del diccionario:
            mi_diccionario['clave1'] = nuevo_valor

        Eliminar clave y valor asociado dentro del diccionario:
            del mi_diccionario['clave1']

        Acceder a los datos por sus claves en lugar de su posicion:
            nombre = mi_diccionario['clave1']
            print(nombre); #Imprimira valor1.

        De igual manera para moidificar su valor:
            nombre['clave1'] = 26
            print(nombre); #Imprimira 26

        O añadir nuevas clave-valor al diccionario:
            nombre['peso'] = 70
            print(nombre) = Todo el diccionarion mas el peso = 70

        Tambien es posible determinar si una clave existe en el diccionario:
            if 'nombre' in persona:
                print('La clave "nombre" existe en el diccionario')
            else:
                print('La clave "nombre" no existe en el diccionario')    



    Los diccionarios tambien pueden ser utilizados en combinacion con otros conceptos, como las funciones.
    Por ejemplo podemos crear una funcion que tenga como argumento un diccionario y que devuelva el valor correspondiente
    a una clave especifica.

        def consulta_valor(diccionario, clave):
            return diccionario[clave]

    
    Son muy usados en python para almacenar informacion compleja en una estructura facilmente accesible.
    Por ejemplo:
        En una tienda online almacenamos la informacion del catalogo de productos en un diccionario
        donde cada clave era el nombre del producto y cada valor era un objeto que contenía la descripción, el precio, el inventario disponible 
        y otros detalles relevantes.

        catalogo_productos = {
            "Camiseta de algodon": {"descripcion": "Camiseta comoda de algodon", "precio": 20, "inventario": 50},
            "Sudadera con capucha": {"descripcion": "Sudadera suave y abrigadora", "precio": 40, "inventario": 30},
            "Paquete de stickers": {"descripcion": "Stickers divertidos para decorar laptops, cuadernos, etc.", "precio": 5, "inventario": 100}
        }

        catalogo_productos["Taza de cafe con logotipo"] = {"descripcion": "Taza de ceramica con el logotipo de la tienda", "precio": 10, "inventario": 20}


        En este ejemplo hemos agregado Taza de cafe con logotipo al diccionario de catalogo_productos.


    Al uso de los diccionarios hay funciones que nos pueden ayudar a hacernos la vida mas facil a la hora de realizar acciones con estos diccionarios.

    La funcion len es uno de ellos, gracias a el podemos recorrer toda la el diccionario y de esta manera poder iterar con el de manera sencilla:

    Tomamos este diccionario como ejemplo:

        mi_dict = {'nombre': 'Juan', 'edad': 25, 'ciudad': 'Mexico'}

         Usamos la funcion len:
            print(len(mi_dict))

        Esto nos devolvera 3, ya que dentro del diccionario tenemos solo 3 elementos de clave-valor.


        Tambien se puede usar la funcion len en un diccionarion vacio de esta manera nos devolvera 0,
        porque no hay nada dentro de el.


        Es importante saber que la funcion len solo nos devolvera la cantidad de elementos, no la cantidad clave-valor.


        mi_dict = {'a': 1, 'b': 2, 'c': 3, 'd': {'e': 4, 'f': 5}}

        Si tenemos este diccionario por ejemplo y usamos print(mi_dict), este nos devolvera 4.





CONJUNTOS:

    Los conjuntos son elementos unicos en python que nos permite guardar elementos unicos sin mantener un orden en particular.
    Esto los convierte en una herramienta muy util a la hora de hacer comparaciones entre grupos de datos o para eliminar, elementos duplicados.

    Para comenzar, vamos a crear un conjunto y agregar algunos elementos. 
    En Python, un conjunto se define utilizando llaves {} o utilizando la función set().

    # Crear un conjunto
    numeros = {1, 2, 3, 4, 5}
    letras = set(['a', 'b', 'c', 'd'])



    Operaciones con conjuntos:

        Unión (|): crea un nuevo conjunto con todos los elementos unicos de ambos conjuntos.

        Intersección (&): nos devuelve los elementos comunes entre dos conjuntos.

        Diferencia (-): nos devuelve los elementos que estan en el primer conjunto pero no en el segundo.

        Diferencia simétrica (^): nos devuelve los elementos de ambos conjuntos que no estan en el otro.


        EN ESTAS OPERACIONES CON CONJUNTOS PODEMOS USAR EL SIMBOLO Y EL .NOMBRE:

            frutas_y_verduras = frutas | {"zanahoria", "lechuga"}
            frutas_y_verduras = frutas.union(["zanahoria", "lechuga"])

            Ejemplo con el operador union.
        




        estudiantes_1 = {'Ana', 'Luis', 'Pedro', 'Sofía'}
        estudiantes_2 = {'Fernando', 'Luis', 'Pedro', 'Sofía', 'Valeria'}

        # Unión
        todos_los_estudiantes = estudiantes_1 | estudiantes_2
        print(todos_los_estudiantes) # {'Pedro', 'Fernando', 'Luis', 'Sofía', 'Valeria', 'Ana'}

        # Intersección
        estudiantes_repetidos = estudiantes_1 & estudiantes_2
        print(estudiantes_repetidos) # {'Pedro', 'Luis', 'Sofía'}

        # Diferencia
        estudiantes_solo_grupo1 = estudiantes_1 - estudiantes_2
        print(estudiantes_solo_grupo1) # {'Ana'}

        # Diferencia simétrica
        estudiantes_no_compartidos = estudiantes_1 ^ estudiantes_2
        print(estudiantes_no_compartidos) # {'Ana', 'Fernando', 'Valeria'}


    Propiedades de conjuntos:

        Los conjuntos tienen algunas propiedades muy interesantes que podemos utilizar.
        Una de ellas es que SOLO PUEDE HABER UN ELEMENTO DE CADA VALOR. Esto significa que si queremos añadir algun elemento que ya existe 
        este no se añadira. Sin embargo para quitar elementos podemos usar discard() o remove().

        colores = {'rojo', 'naranja', 'amarillo', 'verde', 'azul'}

        # Agregar un elemento
        colores.add('violeta')
        colores.add('rojo') # No se agrega, ya existe

        # Eliminar un elemento
        colores.remove('amarillo')
        colores.discard('blanco') # No pasa nada, no existe

        print(colores) # {'naranja', 'verde', 'rojo', 'azul', 'violeta'}


        Otra propiedad es verificar si un conjunto es subconjunto de otro
        El método .issuperset() en Python se usa con conjuntos (set) para verificar si un conjunto contiene todos los elementos de otro conjunto.

        A = {1, 2, 3, 4, 5}
        B = {2, 3}

        print(A.issuperset(B))  # True, porque A contiene todos los elementos de B

        C = {6, 7}
        print(A.issuperset(C))  # False, porque A no contiene los elementos de C


        Caso practico del .issuperset():

        Verificar permisos:

        permisos_usuario = {"leer", "escribir", "ejecutar"}
        permisos_requeridos = {"leer", "escribir"}

        if permisos_usuario.issuperset(permisos_requeridos):
            print("Acceso concedido")
        else:
            print("Acceso denegado")

        1. Aquí verificamos si un usuario tiene todos los permisos necesarios.

        2. Comprobar si un conjunto de datos está contenido en otro (útil en validaciones o filtrados).

        Operaciones de teoría de conjuntos, como verificar si un grupo de números o palabras es un subconjunto de otro.



    Utilidades avanzadas de los conjuntos:

        Subconjuntos y superconjuntos:

        Esto es un concepto muy importante que debemos conocer. Decimos que un conjunto A es un subconjunto de otro conjunto B si cada elemento de a
        se encuentra en B

        La notación para esto es A ⊆ B.

        Y si algun elemento de A no se encuentra en B entonces decimos que A no es un subconjunto de B.

        .issubset()

        A = {1,2,3}
        B = {1,2,3,4,5}
        print(A.issubset(B)) # True




        Por otro lado decimos que A es un superconjunto de B si cada elemento de B se encuentra en A

        La notación para esto es A ⊇ B

        .issuperset()

        A = {1,2,3,4}
        B = {1,2,3}
        print(A.issuperset(B)) # True


        Conjuntos como filtros:

            Se pueden usar en varias ocasiones como filtros, para filtrar listas:

            Por ejemplo, supongamos que tenemos una lista y queremos quedarnos con los que son divisibles de 3.Podemos generar un conjunto 
            que contenga todos los números que son múltiplos de 3 y luego filtrar nuestra lista de acuerdo a este conjunto.

            numeros = [1,2,3,4,5,6,7,8,9,10]
            multiplos_3 = {n for n in numeros if n % 3 == 0} # generamos el conjunto de múltiplos de 3
            numeros_filtrados = [n for n in numeros if n in multiplos_3] # filtramos la lista usando el conjunto de múltiplos de 3
            print(numeros_filtrados) # [3, 6, 9]

            Explicacion del n for n in:

                {expresion for variable in iterable if condicion}
                
                -expresion → Lo que queremos agregar al conjunto (en este caso, n).

                -for variable in iterable → Itera sobre los elementos de iterable (aquí, numeros).

                -if condicion → Filtro opcional que decide qué elementos incluir.






            Manera mas sencilla:

                multiplos_3 = set()  # Crear un conjunto vacío
                for n in numeros:
                    if n % 3 == 0:
                        multiplos_3.add(n)  # Agregar solo los múltiplos de 3

                print(multiplos_3)


    Conjuntos inmutables:

            Esto se define como conjuntos que no pueden ser modificados una vez creados.
            Para esto usamos el tipo de dato .frozenset(). Los conjuntos inmutables a veces se usan con conjuntos mutables para que no se modifiquen
            los datos por accidente de un conjunto.

            conjunto = {1,2,3}
            conjunto_inmutable = frozenset(conjunto) # creamos el conjunto inmutable a partir del conjunto original
            print(conjunto_inmutable) # frozenset({1, 2, 3})



            Las operaciones con conjuntos son muy utiles a la hora de operar con ellos. Como mostramos anteriormente son:
                Union, Interseccion y diferencia simetrica




    Operaciones avanzadas con conjuntos:

        Eliminar elementos duplicados:
            A veces podemos tener elementos duplicados en una lista por lo que a la hora de eliminarlos podemos hacerlo de la siguiente semana:
                
                a = [1, 2, 3, 2, 4, 1]
                b = list(set(a))
                print(b)  # [1, 2, 3, 4]

                Convertimos la lista a un conjunto y luego volver a convertirlo a una lista




MANIPULACIONES DE STRINGS:

    La manipulacion de strings se refierfe a la capacidad de manipular, modificar o procesar informacion textual utilizando herramientas especificas en nuestro
    lenguaje.

    Ejemplo:

    # Operador de suma

        string1 = "¡Hola"
        string2 = "Mundo!"
        saludo = string1 + " " + string2
        print(saludo) # Salida: ¡Hola Mundo!

    # Operador de multiplicación

        gritos = "¡Ayuda! " * 3
        print(gritos) # Salida: ¡Ayuda! ¡Ayuda! ¡Ayuda!


    Ademas de estos operadores que tenemos en python tambien contamos con una gran variedad de funciones para trabajar con strings:

        # Estos operadores se usan despues de la variable de string con un . y la funcion que queramos usar #

        len(): Recorre todo el string

            mensaje = "Ejemplo de string"
            longitud = len(mensaje)
            print(longitud) # Salida: 18


        upper(): Convierte un string en mayuscula

            titulo = "manipulación de strings en Python"
            titulo_en_mayusculas = titulo.upper()
            print(titulo_en_mayusculas) # Salida: MANIPULACIÓN DE STRINGS EN PYTHON


        lower(): Convierte un string en minuscula

            nombre = "JUAN PÉREZ"
            nombre_en_minusculas = nombre.lower()
            print(nombre_en_minusculas) # Salida: juan pérez


        replace(): Reemplaza un substring con otro dentro de un string

            mensaje = "Hola mundo"
            mensaje_modificado = mensaje.replace("mundo", "universo")
            print(mensaje_modificado) # Salida: Hola universo
            

        split(): Divide un string en substrings que estan contenidas dentro de una lista separados por un caracter especifico.

            palabras = "¡Bienvenidos al curso de Python!"
            palabras_separadas = palabras.split(" ")
            print(palabras_separadas) # Salida: ['¡Bienvenidos', 'al', 'curso', 'de', 'Python!']


        join(): Une una lista de strings utilizando un separador especifico.

            palabras = ['¡Bienvenidos', 'al', 'curso', 'de', 'Python!']
            separador = " "
            mensaje = separador.join(palabras)
            print(mensaje) # Salida: ¡Bienvenidos al curso de Python!


        



    Concatenacion y recorte:

        La concaternacion: es la operacion que se usa para unir dos o mas cadenas. Para lograr esto usamos el operador +.

        