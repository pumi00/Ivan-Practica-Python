FUNCIONES:

    Una funcion es un grupo de instrucciones que realizan una tarea especifica.
    Se define usando la palabra clave def, seguida del nombre de la funcion y los parametros entre parentesis.
    Despues de los parentesis se utiliza un colon : y se empieza a definir el cuerpo de la funcion.

    Ejemplo:


        def suma(a,b):
            resultado = a + b
            return resultado

        El return se usa en una funcion para poder devolverle algo es decir en este caso estamos devolviendo 
        el resultado de la suma.
        Si una funcion no tiene la palabra return, esa funcion devolvera None.

        Se pueden pasar parametros con nombres en especifico por ejemplo:

        def nombreFuncion(nombre="Juan", edad=30)


FUNCIONES PREDEFINIDAS EN PYTHON:

    print(): Esta funcion nos permite imprimir mensajes en consolas

    input(): Esta funcion le pide al usuario que introduzca datos

    len(): Esta funcion nos permite averiguar la longitud de un objeto

    range(): Esta funcion nos permite crear una secuencia de numeros

    ord(): Con el metodo ord podemos pasar las letras a sus numeros ASCII 







_________________________LISTAS_________________________


LISTAS:

    Una lista es una coleccion ordenada de elementos que pueden ser de cualquier tipo.
    Las listas se definen con corchetes y los elementos se separan con comas.

    numeros = [1, 2, 3, 4, 5]

    Se puede acceder a esos datos mediante el indice, que es la posicion del elemento en la lista, que comienza en 0.
    Es decir, si queremos acceder al segundo numero que contiene la lista seria 1.


    Dentro de la lista hay mas funciones que podemos realizar como añadir numeros, ordenarlos... etc.

    Metodos de Listas:

        append(): Añade un elemento al final

        extend(): Añade un elemento al principio

        insert(): Inserta un elemento en una posicion especifica

        remove(): Elimina la primera ocurrencia de un elemento

        pop(): Elimina y devuelve un elemento
        
        sort(): Ordena la lista 

        reverse(): Invierte el orden de los elementos 

        index(): Devuelve el indice de un valor 
        
        count(): Cuenta las ocurrencias de un valor 

        clear(): Elimina todos los elementos de la lista 



    Las listas son una coleccion ordenada y mutable.

    Mutable quiere decir que las listas pueden ser ordenadas.


    Tambien podemos iterar por cada elemento con el bucle for:


    nombres = ["Juan", "Maria", "Pedro"]

    for nombre in nombres:
        print(nombre)

    Este codigo imprimira:

    Juan
    Maria
    Pedro




    Las listas pueden contener otro tipo de elementos incluso otro tipo de listas o objetos del mismo tipo:

    lista_ejemplo = [1, "dos", True, [1, 2, 3, 4]]

    En este caso la lista tiene un entero, un string, un booleano y una lista.

    Tambien podemos hacer uso del len() para encontrar la longitud de una lista.


    Podemos eliminar elementos con la palabra clave del o remove(), la diferencia que tienen es que la palabra del
    elimina un elemento en una posicion especifica mientras que remove() elimina un elemento por su valor

    Ejemplo:

    frutas = ["pera", "manzana", "uva", "mango"]
    del frutas[0] # elimina pera
    frutas.remove('manzana')  # elimina manzana



DICCIONARIO:

    Los diccionarios permiten que los preogramadores asignen valores a ciertas palabras claves y luego recuperen esos valores 
    mas adelante mediante la referencia de la palabra clave.+

    Los diccionarios son mutables, lo que significa que podemos modificar, agregar y eliminar elementos

    En terminos de sintaxis, los diccionarios se definen con llaves y no con con corchetes:

        personas = {'Juan': 31, 'Pedro': 25, 'Maria': 42}

    Una vez tenemos nuestro diccionario definido, podemos acceder a ellos de distintas maneras:

        Para acceder a la edad de Juan:
            print(personas['Juan']) = "31"



    Los diccionarios son estructuras de datos que permiten almacenar elementos de forma clave-valor:
        Se usan para almacenar datos clave-valor y son muy utiles para cuando queremos accedere rapidamente a ciertos elementos 
        sin recorrer una lista o un conjunto completo.

    En un diccionario las claves son inmutables y unicas lo que significa que no pueden ser duplicadas o borradas,
    mientras que los valores son de cualquier tipo de datos y pueden ser duplicadas y no son unicas.


        mi_diccionario = {'clave1': valor1, 'clave2': valor2, 'clave3': valor3}

    Si cogemos como ejemplo este diccionario creado llamado mi_diccionario:
    
        Podemos agregar datos:
            mi_diccionario['nueva_clave'] = nuevo_valor

        Modificar el valor de cualquier clave dentro del diccionario:
            mi_diccionario['clave1'] = nuevo_valor

        Eliminar clave y valor asociado dentro del diccionario:
            del mi_diccionario['clave1']

        Acceder a los datos por sus claves en lugar de su posicion:
            nombre = mi_diccionario['clave1']
            print(nombre); #Imprimira valor1.

        De igual manera para moidificar su valor:
            nombre['clave1'] = 26
            print(nombre); #Imprimira 26

        O añadir nuevas clave-valor al diccionario:
            nombre['peso'] = 70
            print(nombre) = Todo el diccionarion mas el peso = 70

        Tambien es posible determinar si una clave existe en el diccionario:
            if 'nombre' in persona:
                print('La clave "nombre" existe en el diccionario')
            else:
                print('La clave "nombre" no existe en el diccionario')    



    Los diccionarios tambien pueden ser utilizados en combinacion con otros conceptos, como las funciones.
    Por ejemplo podemos crear una funcion que tenga como argumento un diccionario y que devuelva el valor correspondiente
    a una clave especifica.

        def consulta_valor(diccionario, clave):
            return diccionario[clave]

    
    Son muy usados en python para almacenar informacion compleja en una estructura facilmente accesible.
    Por ejemplo:
        En una tienda online almacenamos la informacion del catalogo de productos en un diccionario
        donde cada clave era el nombre del producto y cada valor era un objeto que contenía la descripción, el precio, el inventario disponible 
        y otros detalles relevantes.

        catalogo_productos = {
            "Camiseta de algodon": {"descripcion": "Camiseta comoda de algodon", "precio": 20, "inventario": 50},
            "Sudadera con capucha": {"descripcion": "Sudadera suave y abrigadora", "precio": 40, "inventario": 30},
            "Paquete de stickers": {"descripcion": "Stickers divertidos para decorar laptops, cuadernos, etc.", "precio": 5, "inventario": 100}
        }

        catalogo_productos["Taza de cafe con logotipo"] = {"descripcion": "Taza de ceramica con el logotipo de la tienda", "precio": 10, "inventario": 20}


        En este ejemplo hemos agregado Taza de cafe con logotipo al diccionario de catalogo_productos.


    Al uso de los diccionarios hay funciones que nos pueden ayudar a hacernos la vida mas facil a la hora de realizar acciones con estos diccionarios.

    La funcion len es uno de ellos, gracias a el podemos recorrer toda la el diccionario y de esta manera poder iterar con el de manera sencilla:

    Tomamos este diccionario como ejemplo:

        mi_dict = {'nombre': 'Juan', 'edad': 25, 'ciudad': 'Mexico'}

         Usamos la funcion len:
            print(len(mi_dict))

        Esto nos devolvera 3, ya que dentro del diccionario tenemos solo 3 elementos de clave-valor.


        Tambien se puede usar la funcion len en un diccionarion vacio de esta manera nos devolvera 0,
        porque no hay nada dentro de el.


        Es importante saber que la funcion len solo nos devolvera la cantidad de elementos, no la cantidad clave-valor.


        mi_dict = {'a': 1, 'b': 2, 'c': 3, 'd': {'e': 4, 'f': 5}}

        Si tenemos este diccionario por ejemplo y usamos print(mi_dict), este nos devolvera 4.





CONJUNTOS:

    Los conjuntos son elementos unicos en python que nos permite guardar elementos unicos sin mantener un orden en particular.
    Esto los convierte en una herramienta muy util a la hora de hacer comparaciones entre grupos de datos o para eliminar, elementos duplicados.

    Para comenzar, vamos a crear un conjunto y agregar algunos elementos. 
    En Python, un conjunto se define utilizando llaves {} o utilizando la función set().

    # Crear un conjunto
    numeros = {1, 2, 3, 4, 5}
    letras = set(['a', 'b', 'c', 'd'])



    Operaciones con conjuntos:

        Unión (|): crea un nuevo conjunto con todos los elementos unicos de ambos conjuntos.

        Intersección (&): nos devuelve los elementos comunes entre dos conjuntos.

        Diferencia (-): nos devuelve los elementos que estan en el primer conjunto pero no en el segundo.

        Diferencia simétrica (^): nos devuelve los elementos de ambos conjuntos que no estan en el otro.


        EN ESTAS OPERACIONES CON CONJUNTOS PODEMOS USAR EL SIMBOLO Y EL .NOMBRE:

            frutas_y_verduras = frutas | {"zanahoria", "lechuga"}
            frutas_y_verduras = frutas.union(["zanahoria", "lechuga"])

            Ejemplo con el operador union.
        




        estudiantes_1 = {'Ana', 'Luis', 'Pedro', 'Sofía'}
        estudiantes_2 = {'Fernando', 'Luis', 'Pedro', 'Sofía', 'Valeria'}

        # Unión
        todos_los_estudiantes = estudiantes_1 | estudiantes_2
        print(todos_los_estudiantes) # {'Pedro', 'Fernando', 'Luis', 'Sofía', 'Valeria', 'Ana'}

        # Intersección
        estudiantes_repetidos = estudiantes_1 & estudiantes_2
        print(estudiantes_repetidos) # {'Pedro', 'Luis', 'Sofía'}

        # Diferencia
        estudiantes_solo_grupo1 = estudiantes_1 - estudiantes_2
        print(estudiantes_solo_grupo1) # {'Ana'}

        # Diferencia simétrica
        estudiantes_no_compartidos = estudiantes_1 ^ estudiantes_2
        print(estudiantes_no_compartidos) # {'Ana', 'Fernando', 'Valeria'}


    Propiedades de conjuntos:

        Los conjuntos tienen algunas propiedades muy interesantes que podemos utilizar.
        Una de ellas es que SOLO PUEDE HABER UN ELEMENTO DE CADA VALOR. Esto significa que si queremos añadir algun elemento que ya existe 
        este no se añadira. Sin embargo para quitar elementos podemos usar discard() o remove().

        colores = {'rojo', 'naranja', 'amarillo', 'verde', 'azul'}

        # Agregar un elemento
        colores.add('violeta')
        colores.add('rojo') # No se agrega, ya existe

        # Eliminar un elemento
        colores.remove('amarillo')
        colores.discard('blanco') # No pasa nada, no existe

        print(colores) # {'naranja', 'verde', 'rojo', 'azul', 'violeta'}


        Otra propiedad es verificar si un conjunto es subconjunto de otro
        El método .issuperset() en Python se usa con conjuntos (set) para verificar si un conjunto contiene todos los elementos de otro conjunto.

        A = {1, 2, 3, 4, 5}
        B = {2, 3}

        print(A.issuperset(B))  # True, porque A contiene todos los elementos de B

        C = {6, 7}
        print(A.issuperset(C))  # False, porque A no contiene los elementos de C


        Caso practico del .issuperset():

        Verificar permisos:

        permisos_usuario = {"leer", "escribir", "ejecutar"}
        permisos_requeridos = {"leer", "escribir"}

        if permisos_usuario.issuperset(permisos_requeridos):
            print("Acceso concedido")
        else:
            print("Acceso denegado")

        1. Aquí verificamos si un usuario tiene todos los permisos necesarios.

        2. Comprobar si un conjunto de datos está contenido en otro (útil en validaciones o filtrados).

        Operaciones de teoría de conjuntos, como verificar si un grupo de números o palabras es un subconjunto de otro.



    Utilidades avanzadas de los conjuntos:

        Subconjuntos y superconjuntos:

        Esto es un concepto muy importante que debemos conocer. Decimos que un conjunto A es un subconjunto de otro conjunto B si cada elemento de a
        se encuentra en B

        La notación para esto es A ⊆ B.

        Y si algun elemento de A no se encuentra en B entonces decimos que A no es un subconjunto de B.

        .issubset()

        A = {1,2,3}
        B = {1,2,3,4,5}
        print(A.issubset(B)) # True




        Por otro lado decimos que A es un superconjunto de B si cada elemento de B se encuentra en A

        La notación para esto es A ⊇ B

        .issuperset()

        A = {1,2,3,4}
        B = {1,2,3}
        print(A.issuperset(B)) # True


        Conjuntos como filtros:

            Se pueden usar en varias ocasiones como filtros, para filtrar listas:

            Por ejemplo, supongamos que tenemos una lista y queremos quedarnos con los que son divisibles de 3.Podemos generar un conjunto 
            que contenga todos los números que son múltiplos de 3 y luego filtrar nuestra lista de acuerdo a este conjunto.

            numeros = [1,2,3,4,5,6,7,8,9,10]
            multiplos_3 = {n for n in numeros if n % 3 == 0} # generamos el conjunto de múltiplos de 3
            numeros_filtrados = [n for n in numeros if n in multiplos_3] # filtramos la lista usando el conjunto de múltiplos de 3
            print(numeros_filtrados) # [3, 6, 9]

            Explicacion del n for n in:

                {expresion for variable in iterable if condicion}
                
                -expresion → Lo que queremos agregar al conjunto (en este caso, n).

                -for variable in iterable → Itera sobre los elementos de iterable (aquí, numeros).

                -if condicion → Filtro opcional que decide qué elementos incluir.






            Manera mas sencilla:

                multiplos_3 = set()  # Crear un conjunto vacío
                for n in numeros:
                    if n % 3 == 0:
                        multiplos_3.add(n)  # Agregar solo los múltiplos de 3

                print(multiplos_3)


    Conjuntos inmutables:

            Esto se define como conjuntos que no pueden ser modificados una vez creados.
            Para esto usamos el tipo de dato .frozenset(). Los conjuntos inmutables a veces se usan con conjuntos mutables para que no se modifiquen
            los datos por accidente de un conjunto.

            conjunto = {1,2,3}
            conjunto_inmutable = frozenset(conjunto) # creamos el conjunto inmutable a partir del conjunto original
            print(conjunto_inmutable) # frozenset({1, 2, 3})



            Las operaciones con conjuntos son muy utiles a la hora de operar con ellos. Como mostramos anteriormente son:
                Union, Interseccion y diferencia simetrica




    Operaciones avanzadas con conjuntos:

        Eliminar elementos duplicados:
            A veces podemos tener elementos duplicados en una lista por lo que a la hora de eliminarlos podemos hacerlo de la siguiente semana:
                
                a = [1, 2, 3, 2, 4, 1]
                b = list(set(a))
                print(b)  # [1, 2, 3, 4]

                Convertimos la lista a un conjunto y luego volver a convertirlo a una lista




MANIPULACIONES DE STRINGS:

    La manipulacion de strings se refierfe a la capacidad de manipular, modificar o procesar informacion textual utilizando herramientas especificas en nuestro
    lenguaje.

    Ejemplo:

    # Operador de suma

        string1 = "¡Hola"
        string2 = "Mundo!"
        saludo = string1 + " " + string2
        print(saludo) # Salida: ¡Hola Mundo!

    # Operador de multiplicación

        gritos = "¡Ayuda! " * 3
        print(gritos) # Salida: ¡Ayuda! ¡Ayuda! ¡Ayuda!


    Ademas de estos operadores que tenemos en python tambien contamos con una gran variedad de funciones para trabajar con strings:

        # Estos operadores se usan despues de la variable de string con un . y la funcion que queramos usar #

        len(): Recorre todo el string

            mensaje = "Ejemplo de string"
            longitud = len(mensaje)
            print(longitud) # Salida: 18


        upper(): Convierte un string en mayuscula

            titulo = "manipulación de strings en Python"
            titulo_en_mayusculas = titulo.upper()
            print(titulo_en_mayusculas) # Salida: MANIPULACIÓN DE STRINGS EN PYTHON


        lower(): Convierte un string en minuscula

            nombre = "JUAN PÉREZ"
            nombre_en_minusculas = nombre.lower()
            print(nombre_en_minusculas) # Salida: juan pérez


        replace(): Reemplaza un substring con otro dentro de un string

            mensaje = "Hola mundo"
            mensaje_modificado = mensaje.replace("mundo", "universo")
            print(mensaje_modificado) # Salida: Hola universo
            

        split(): Divide un string en substrings que estan contenidas dentro de una lista separados por un caracter especifico.

            palabras = "¡Bienvenidos al curso de Python!"
            palabras_separadas = palabras.split(" ")
            print(palabras_separadas) # Salida: ['¡Bienvenidos', 'al', 'curso', 'de', 'Python!']


        join(): Une una lista de strings utilizando un separador especifico.

            palabras = ['¡Bienvenidos', 'al', 'curso', 'de', 'Python!']
            separador = " "
            mensaje = separador.join(palabras)
            print(mensaje) # Salida: ¡Bienvenidos al curso de Python!


        



    Concatenacion y recorte:

        La concaternacion: es la operacion que se usa para unir dos o mas cadenas. Para lograr esto usamos el operador +.

        message1 = "¡Hola"
        message2 = "amigos!"
        message3 = message1 + " " + message2
        print(message3) # Output: ¡Hola amigos!



        Y la operacion de recorte se usa para eliminar una porcion de la cadena original.

        Para recortar la cadena necesitamos saber el indice de inicio y el indice de fin.

        message = "Querido diario, hoy he vivido una experiencia inolvidable."
        new_message = message[30:57] # Recorta la cadena original para mostrar solo las palabras "una experiencia inolvidable"
        print(new_message) # Output: una experiencia inolvidable

        El indice del principio que hemos puesto es de 26 ya que de esta manera si vemos como se ordenan serian desde el 0 hasta el 58 en este caso:

    Q  u  e  r  i  d  o     d  i  a  r  i  o  ,     h  o  y     h  e     v  i  v  i  d  o     u  n  a     e  x  p  e  r  i  e  n  c  i  a     i  n  o  l  v  i  d  a  b  l  e  .
    0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58

    Ahora queremos que solo imprima las palabras una experiencia inolvidable, por lo tanto queremos que empiece en el 30 y acabe en el 57 que es despues de la con el punto.



    LOS METODOS DE CADENAS PUEDEN UTILIZARSE PARA ENCONTRAR CARACTERES Y SUBCADENAS:

        Para hacer tal practica podemos usar el metodo find(). En este metodo busca el caracter especifico en la cadena y devuelve la posicion en la que se encuentra,
        o sino existe devuelve -1 es decir sino existe en la cadena.

            texto = "Hola mundo"
            print(texto.find("m")) #Output: 5 
        
            Es decir no cuenta los espacios entre strings como podemos ver en este caso.

            print(texto.find("x")) #Output: -1.  

            Aqui al no encontrarse la x nos devolveria el -1 como podemos ver.


        Para encontrar una subcadena dentro de una cadena utilizamos el metodo .index()
        Este metodo busca la subcadena que le digamos y nos dice la posicion en la que empieza o lanza una excepcion si no encuentra nada.

        texto = "Hola mundo"
        print(texto.index("mun")) # Output: 5
        print(texto.index("x")) # Output: ValueError: substring not found

        
        Si queremos contar las veces que aparece una subcadena en la cadena usamos el .count().

        texto = "Hola mundo"
        print(texto.count("o")) # Output: 2



        Tambien podemos averiguar si una cadena empieza o termina con una subcadena.

        texto = "Hola mundo"
        print(texto.startswith("Hola")) # Output: True
        print(texto.endswith("mundo")) # Output: True

        startswith: esta es para ver si empieza

        endswith: esta es para ver si termina.


        Ejemplo de uso.



        nombre_edad = "Juan 32"
        nombre, edad = nombre_edad.split()

            split():

            La función .split() divide la cadena "Juan 32" en una lista usando los espacios como separador.

            Resultado: ["Juan", "32"]

            Desempaquetado de variables:

            nombre, edad = ["Juan", "32"]

            nombre recibe "Juan"

            edad recibe "32"



TRABAJAR CON ARCHIVOS:

    En python existen dos tipos de archivos: los archivos de texto y los binarios.

        Archivos de texto: Son aquellos que contienen caracteres legibles para humanos, como numeros y letras.

        Archivos binarios: Contienen datos codificados en binario, que solo las aplicaciones pueden entender.

    
    Para empezar a trabajar con los archivos en python lo primeor que tenemos que hacer, es abrirlo y para ello usamos la funcion,
    open:

        archivo = open("mi_archivo.txt", "r")

        Donde se encuentra la r es del tipo que queremos abrir el archivo, es decir en este caso es en forma de lectura, que se indica con una r.

        Tipos de abrir el archivo:

            "r": lectura.

            "w": escritura.

            "r+": lectura y escritura.



        Ahora que hemos abierto el archivo, podemos leer su contenido o escribir algo. Para leer el contenido del archivo usamos la funcion read.

            contenido = archivo.read()

        La variable contenido ahora nos devuelve todo lo que estaba en el archivo. Si queremos leerlo por partes porque el archivo es demasiado grande,
        podemos utilizar readline, que esto nos devuelve una linea cada vez que lo llamamos.

            linea1 = archivo.readline()
            linea2 = archivo.readline()


            A continuacion vamos a poner mas ejemplos que se pueden dar con el readline():

            Antes de enseñar los ejemplo haremos una buena pracica en python que es el uso del with, que esto nos hace,
            abrir y cerrar el archivo de manera automatica sin que nosotros se lo digamos.

                Si queremos leer las 5 primeras lineas:

                    with open("archivo.txt", "r") as archivo:
                        for _ in range(5):
                            linea = archivo.readline()



                Si queremos que nos lo lea cada 2 lineas:

                    with open("archivo.txt", "r") as archivo:
                        for i, linea in enumerate(archivo):
                            if i % 2 == 0:
                                print(linea.strip())



                Si queremos que lea lineas especificas:

                    with open("archivo.txt", "r") as archivo:
                        for linea in islice(archivo, 0, None, 2):
                            print(linea.strip())


                    La funcion islice es una funcion del modulo itertools que permite obtener una "rebanada" de un iterable, como si estuviera usando el operador
                    slicing [:] en una lista, pero sin cargar todo el iterable en memoria.

                    Se compone de: itertools.islice(iterable, start, stop, step)


                    iterable: Cualquier objeto iterabe

                    start: Inicia desde donde comienza la rebanada 

                    stop: Indica donde termina 

                    step: Cuantos elementos salta


        Para escribir en el archivo usamos el write:

            archivo.write("Hola mundo!")

            Esta linea de codigo escribe Hola mundo! en archivo.txt


        Una vez que hayamos terminado de trabajar con el archivo mi_archivo.txt tendremos que cerrarlo.

        archivo.close()




        Un ejemplo para abrir, leer y cerrar el archivo seria de esta forma:

            archivo = open('prueba.txt', 'r')
            contenido = archivo.read()
            print(contenido)
            archivo.close()





MANEJO DE ERRORES EN PYTHON:

    Los errores en python como en cualquier lenguaje son bastante recurrentes y mas al principio por eso para poder manejarlos se usan con excepciones:
        Las excepciones son objetos que se utilizan para manejar errores y es la forma mas eficaz y elegante de manejar los errores.

    Un error comun en Python es el NameError, que se produce cuando se utiliza una variable que no ha sido definida.


    try: 
        print(variable)

    except NameError:
        print("La variable no ha sido definida")


    Este código intenta imprimir la variable, pero si se produce un NameError, el código dentro del bloque except se ejecutará, en este caso,
    imprimirá un mensaje indicando que la variable no ha sido definida.

    Otro error común es el TypeError, que se produce cuando intentamos realizar una operación con un objeto de tipo incorrecto.
    Por ejemplo si queremos sumar un numero con una cadena de texto.

    numero = 5
    texto = "Hola mundo"
    resultado = numero + texto
    print("resultado")




    numero = 5
    texto = "Hola mundo"
    try:
        resultado = numero + texto
    except TypeError:
        print("No se puede sumar un número con una cadena de texto")


    Este código intenta sumar el número y la cadena de texto, pero si se produce un TypeError, el código dentro del bloque except se ejecutará
    e imprimirá un mensaje como que no se pueden sumar ambos tipos de datos.
    



PERSONALIZAR EXECPCIONES Y MEJORAR LA LEGIBILIDAD DE NUESTRO CODIGO:

    A veces en python es util personalizar las exepciones cuando se manejan para tener un manejo de errores mas comprensibles.

    Para crear una excepcion personalizada, necesitamos crear una clase que herede de la clase "Exeption" 

    class MiErrorPersonalizado(Exception):
        pass 

    
    Una vez que hemos definido nuestra excepcion personalizada podemos levantar nuestro codigo cuando surja una situacion particular.

    def mi_funcion():
        raise MiErrorPersonalizado("Ocurrio un error personalizado")

    
    Uso comunes de raise statement:

        Lanzar un error personalizado cuando ciertas condiciones no se cumplen.
        Re-lanzar una excepcion capturada.


    Puedes lanzar cualquier excepcion que herede de BaseExepcion, pero en la practica se usan clase derivadas de Exepcion.

    ValueError,

    TypeError,

    RuntimeError,

    KeyError,

    Exepciones personalizadas (definidas por el usuario)


    Tambien en las exepciones podemos crear argumentos para proporcionar un contexto adicional

    class ValorInvalidoError(Exception):
    def __init__(self, mensaje, valor):
        super().__init__(mensaje)
        self.valor = valor


    En este ejemplo hemos definidio una nueva exepcion llamada ValorInvalidoError que hereda de la clase Exeption.
    Hemos proporcionado un mensaje que describe el error, asi como un argumento adicional llamado valor que almacena el valor que causo la exepcion


    Y se usa de esta manera 
    
    def mi_funcion(valor):
    if valor < 0:
        raise ValorInvalidoError("El valor no puede ser negativo", valor)





USO DEL FINALLY PARA UNA BUENA EJECUCION DEL CODIGO:


    Para poder usar en la programacion codigo que es de manera obligatoria su ejecucion podemos usar el finally idependientemente si hay un error o no.

    Se usa con los bloques try and except. El bloque try de "intentar" ejecuta un conjunto de instrucciones mientras que el bloque except se encarga de "atrapar"
    cualquier exepcion o error durante la ejecucion del bloque try.

    try:
        x = 5 / 0
    except ZeroDivisionError:
        print("No puedes dividir entre cero.")
    finally:
        print("Este código se ejecutará sin importar si se produjo una excepción o no.") 




    Intentamos dividir el numero 5 entre 0 lo cual produce un error de ZeroDivision el bloque except atrapa ese error y se ejecuta el finally imprimiendo
    otro mensaje en la consola 


    Otro ejemplo que podemos ver es el ValueError pero como la exepcion es realmente el que ocurre es ZeroDivisionError el bloque except no se ejecutara pero se
    imprimira el bloque finally.






MODULARIDAD Y ORGANIZACION


    La modularidad ayuda a nuestro codigo a organizarla en modulos y paquetes.
    La modularidad tambien nos permite reutilizar el codigo en diferentes proyectos sin tener que volver a escribirlo

    Esto es la clave para la organizacion de nuestro codigo. Un modulo es un archivo que contiene definiciones de funciones, clases y variables.
    Mientras que un paquete es una coleccion de modulos y otros paquetes qeu se pueden importar en otros proyectos.

    Un ejemplo seria:

        Si estas construyendo una aplicacion que necesita interactuar con una base de datos, podrias crear un modulo que contenga todas las funciones relacionadas,
        con la base de datos. Estas funciones se puede reutilizar en otros proyectos para ahorrarte tiempo.


    #archivo modulo_ejemplo.py 
    def suma(a, b):
        return a + b

    def resta(a, b):
        return a - B

    
    Este archivo contiene os funciones de suma y resta que pueden ser importadas en otros archivos de python para ser usadas ahi. 
    Para importarla en otro archivo usamos el import seguida del nombre del archivo sin la extension .py 



    #archivo principal.py
    import modulo_ejemplo 

    print(modulo_ejemplo.suma(3,4))
    print(modulo_ejemplo.resta(3,4))


    Con esto podemos hacer un mejor uso de las funciones y de esta manera tener todo organizado en paquetes y modulos y asi usarlos cuando queramos, como 
    vemos en el ejemplo de arriba que hemos accedido a la funcion de resta y suma de otro archivo que teniamos.



La creacion de modulos permite reutilizar codigo compartido entre proyectos:

    Esto es una tecnica muy eficaz para optimizar la reutilizacion de codigo en diferentes proyectos. Es muy comun que escribamos todo el codigo en un archivo.

    Sin embargo esto no es lo recomendable, ya que a medida que el proyecto aumenta de tamaño, resulta dificil de mantener y modificar.

    La utilizacion de modulos, tambien llamados bibliotecas, nos permite separar y organizar de manera logica y coherente el codigo fuente en direntes archivo.


    Supongamos que estamos desarrollando diferentes modulos para un sistema de gestion de proyectos. Podriamos modularizar el codigo de la siguiente manera:

    Modulo usuarios: Contiene funciones y clases relaciones con el manejo de usuarios.

    Modulo Proyectos: Contiene funciones y clases relacionadas con el manejo de proyectos.

    Modulo Tareas: Contiene la funcionabilidad relacionada con la asignacion y seguimiento de tareas.


    Cada uno de los modulos contendria su propio archivo de Python y podriamos importar los diferentes modulos segun los requerimientos de cada proyecto.
    Ademas lo efectivo de esto es que si queremos modificar un modulo esto no afectara a los demas por lo que podemos actualizar los modulos sin miedo de
    romper o que nos cause algun error algo.




    # Archivo factores.py
"""
Este módulo contiene las funciones relacionadas con cálculo de factores
"""

def obtener_factores(numero):
    """
    Retorna una lista de factores del número ingresado
    """
    factores = []
    for i in range(1, numero+1):
        if numero % i == 0:
            factores.append(i)
    return factores

def es_primo(numero):
    """
    Retorna True si el número ingresado es primo, False en caso contrario
    """
    if len(obtener_factores(numero)) == 2:
        return True
    else:
        return False



    Este modulo contiene dos funciones: obtener_funciones que obtiene los factores de un numero y es_primo que retorna True si el numero es primo.
    Para utilizar este modulo en otro proyecto bastaria con importar el archivo factores.py y utilizar las funciones definidas dentro del modulo.





    Para crear un paquete usamos un archivo init.py y subdirectorios con modulos:

        Para lograr una organizacion adecuada en proyectos de mayor embergadura seguimos los siguientes pasos:

            1. Crear una carpeta con el nombre del paquete

            2. Dentro de la carpeta, crear un archivo init.py

            3. Crear subdirectorios dentro de la carpeta, cada uno con su propio archivo init.py si fuera necesarios

            4. Agregar los modulos al subdirectorio 


    El init.py es el archivo que ejecuta cuando importamos el paquete. Puede estar vacio o generalmente se utiliza para configurar el paquete y 
    para importar submodulos.


    print("Iniciando paquete...")
    from paquete.subpaquete import modulox, moduloY


    En este ejemplo vemos como imprimos un mensaje de inicio y importar dos modulos de un subpaquete.




    print("Iniciando subpaquete...")
    from paquete.subpaquete.modulox import funcionX


    En este ejemplo importamos una funcion del modulo modulox


    Una vez que hemos creado nuestro paquete y los subdirectorios de los modulos podemos importarlos desde nuestro script:

        import paquete.subpaquete.modulox

    O podemos importar funciones especificas del modulo:

        from paquete.subpaquete.modulox import funcionX





Compartir nuestros paquetes en la biblioteca:

    Un paquete es simplemente un directorio que contiene modulos Python y un archivo _init_.py especial que indica que el directorio es un paquete. 


CREACION DE UN PAQUETE:

    Creamos un directorio llamado mypackage:

        mypackage/
        ├── __init__.py
        └── mymodule.py

    El archivo mymodule.py contiene una funcion sencilla:

    def hello():
        print("Hello World")


    El archivo _init_.py importa la funcion hello de module.py y la hace accesible para quien importe el paquete:

    #_init_.py

    from .module import hello 


    Para importar cogemos el nombre del archivo sin el .py





    Ahora podemos usar importar la funcion y usar la funcion hello:

    #main.py

    from mypackage import Hello

    hello() #Imprime Hello World





PAQUETES MAS COMPLEJOS:


    mypackage/
    ├── __init__.py
    ├── mymodule.py
    └── subpackage/
        ├── __init__.py
        └── anothermodule.py


    El archivo anothermodule.py puede contener una funcion como esta:

        def goodbye():
            print("Goodbye, cruel world!")


    Ahora en el archivo _iit_.py importamos la funcion goodbye:

    from .anothermodule import goodbye


    Finalmente en nuestro archivo main.py importamos la funcion hello y la funcion del submodulo goodbye:

        from mypackage import hello
        from mypackage.subpackage import goodbye

        hello()  # Output: "Hello, world!"
        goodbye()  # Output: "Goodbye, cruel world!"
        



    Aqui ahora podemos ver una forma de proporcionar el codigo a otros progrmadores de manera eficaz y que lo puedan usar incluso casi sin leer que hace
    y comprendan que funcion estan importando:



    def funcion_ejemplo(argumento1, argumento2):
    """Una función que toma dos argumentos y devuelve su suma.

    Args:
        argumento1: un número entero o decimal.
        argumento2: otro número entero o decimal.

    Retorna:
        La suma de argumento1 y argumento2.

    Raises:
        TypeError: si alguno de los argumentos no es un número.
    """
